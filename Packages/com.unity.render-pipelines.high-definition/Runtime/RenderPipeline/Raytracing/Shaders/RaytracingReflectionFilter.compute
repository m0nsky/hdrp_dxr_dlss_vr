#pragma kernel ReflectionRescaleAndAdjustWeight
#pragma kernel ReflectionAdjustWeight
#pragma kernel ReflectionUpscale

#pragma only_renderers d3d11

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/NormalBuffer.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Builtin/BuiltinData.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/BSDF.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/PreIntegratedFGD/PreIntegratedFGD.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/ScreenSpaceLighting/BilateralUpsample.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/ScreenSpaceLighting/ScreenSpaceLighting.hlsl"

// Raytracing Includes
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/OnlineVariance.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/RayTracingFallbackHierarchy.cs.hlsl"

// Tile size of this compute
#define RAYTRACING_REFLECTION_TILE_SIZE 8

// #pragma enable_d3d11_debug_symbols

// Input textures for the spatial filtering
TEXTURE2D_X(_DepthTexture);
TEXTURE2D_X(_SsrLightingTextureRW);
TEXTURE2D_X(_DirectionPDFTexture);
TEXTURE2D_X(_SsrClearCoatMaskTexture);

// Output Textures for the spatial filtering
RW_TEXTURE2D_X(float4, _RaytracingReflectionTexture);

// Compute the weight of this pixel based on the smoothness of the pixel and the min and fadestart values
float ComputeWeightValue(float perceptualSmoothness)
{
    return (_RaytracingReflectionSmoothnessFadeStart == _RaytracingReflectionMinSmoothness) ? 1.0 : max(saturate((perceptualSmoothness - _RaytracingReflectionMinSmoothness) / (_RaytracingReflectionSmoothnessFadeStart -_RaytracingReflectionMinSmoothness)), 0.001);
}

[numthreads(RAYTRACING_REFLECTION_TILE_SIZE, RAYTRACING_REFLECTION_TILE_SIZE, 1)]
void ReflectionRescaleAndAdjustWeight(uint3 dispatchThreadId : SV_DispatchThreadID, uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    // Half resolution coordinate that should be processed
    uint2 halfResCoord = dispatchThreadId.xy;

    // Evaluate which full resolution coordinate should be used for depth, normal, smoothness and clear coat evaluation
    uint2 centerGeometryCoord = ComputeSourceCoordinates(halfResCoord, _RaytracingFrameIndex);

    // Pixel coordinate where the direction an lighting are stored
    uint2 fullResCoord = halfResCoord * 2;

    // Fetch the depth
    float depth = LOAD_TEXTURE2D_X(_DepthTexture, centerGeometryCoord).x;
    // TODO: Check perf vs removing this and the test on detph.
    // Maybe faster to always do small depth load here and then larger directionpdf load?
    // See below for rationale (RaytracingReflections.compute, _RaytracingDirectionBuffer.w will be < 0.0f in this case anyway)

    // Fetch the normal
    NormalData normalData;
    DecodeFromNormalBuffer(centerGeometryCoord, normalData);

    // We use a texture to identify if we use a clear coat constant for perceptualRoughness for SSR or use value from normal buffer.
    // When we use a forward material we can output the normal and perceptualRoughness for the coat for SSR, so we simply bind a black 1x1 texture
    // When we use deferred material we need to bind the gbuffer2 and read the coat mask
    float4 coatMask = LOAD_TEXTURE2D_X(_SsrClearCoatMaskTexture, centerGeometryCoord);
    normalData.perceptualRoughness = HasClearCoatMask(coatMask) ? CLEAR_COAT_PERCEPTUAL_ROUGHNESS : normalData.perceptualRoughness;

    // Duplicating same early out condition we do on reflection dispatchrays as that info is 1/2 res while we need full res granularity here.
    // Also, this operates on data we fetch anyway, while the _SsrLightingTextureRW at central pixel is needed only if that pixel contributes to filtering below.
    float perceptualSmoothness = PerceptualRoughnessToPerceptualSmoothness(normalData.perceptualRoughness);
    // Note the condition
    //      (depth[ComputeSourceCoordinates(halfResCoord, _RaytracingFrameIndex)] == UNITY_RAW_FAR_CLIP_VALUE)
    // is already included in
    //      (_DirectionPDFTexture[(halfResCoord * 2)] < 0.0),
    // see the deferred reflection direction and PDF generation kernels, RaytracingReflectionsHalfRes and RaytracingReflectionsFullRes.
    // (ie even for the half res case not only the condition is included but we also match the source coords for the respective buffers).
    // TODO: if (perceptualSmoothness < _RaytracingReflectionMinSmoothness || LOAD_TEXTURE2D_X(_DirectionPDFTexture, fullResCoord).w < 0.0)
    if (depth == UNITY_RAW_FAR_CLIP_VALUE || perceptualSmoothness < _RaytracingReflectionMinSmoothness || LOAD_TEXTURE2D_X(_DirectionPDFTexture, fullResCoord).w < 0.0)
    {
        _RaytracingReflectionTexture[COORD_TEXTURE2D_X(halfResCoord)] = float4(0.0f, 0.0f, 0.0f, 0.0f);
        return;
    }

    // We also need to compute the fade factor for this sample
    float weight = ComputeWeightValue(perceptualSmoothness);
    float4 lightingTexture = LOAD_TEXTURE2D_X(_SsrLightingTextureRW, fullResCoord);

    weight = (_RayTracingFallbackHierarchy == RAYTRACINGFALLBACKHIERACHY_NON_RAYTRACED_REFLECTION_PROBES_AND_SKY) ? lightingTexture.w * weight : weight;
    _RaytracingReflectionTexture[COORD_TEXTURE2D_X(halfResCoord)] = float4(lightingTexture.xyz, weight);
}

[numthreads(RAYTRACING_REFLECTION_TILE_SIZE, RAYTRACING_REFLECTION_TILE_SIZE, 1)]
void ReflectionAdjustWeight(uint3 dispatchThreadId : SV_DispatchThreadID, uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    // Target texture coordinate
    uint2 targetCoord = dispatchThreadId.xy;

    // Fetch the depth and normal
    float depth = LOAD_TEXTURE2D_X(_DepthTexture, targetCoord).x;
    // TODO: Check perf if removing this and the test on detph.
    // Maybe faster to always do small depth load and then directionpdf load?
    // See below for rationale (RaytracingReflections.compute, _RaytracingDirectionBuffer.w will be < 0.0f in this case anyway)
    NormalData normalData;
    DecodeFromNormalBuffer(targetCoord, normalData);

    // We use a texture to identify if we use a clear coat constant for perceptualRoughness for SSR or use value from normal buffer.
    // When we use a forward material we can output the normal and perceptualRoughness for the coat for SSR, so we simply bind a black 1x1 texture
    // When we use deferred material we need to bind the gbuffer2 and read the coat mask
    float4 coatMask = LOAD_TEXTURE2D_X(_SsrClearCoatMaskTexture, targetCoord);
    normalData.perceptualRoughness = HasClearCoatMask(coatMask) ? CLEAR_COAT_PERCEPTUAL_ROUGHNESS : normalData.perceptualRoughness;

    // Duplicating same early out condition we do on reflection dispatchrays as that info is 1/2 res while we need full res granularity here.
    // Also, this operates on data we fetch anyway, while the _SsrLightingTextureRW at central pixel is needed only if that pixel contributes to filtering below.
    float perceptualSmoothness = PerceptualRoughnessToPerceptualSmoothness(normalData.perceptualRoughness);
    // Note the condition
    //      (depth[targetCoord] == UNITY_RAW_FAR_CLIP_VALUE)
    // is already included in
    //      (_DirectionPDFTexture[targetCoord] < 0.0),
    // see the deferred reflection direction and PDF generation kernels, RaytracingReflectionsHalfRes and RaytracingReflectionsFullRes in RaytracingReflections.compute.
    // (ie even for the half res case not only the condition is included but we also match the source coords for the respective buffers).
    // TODO: if (perceptualSmoothness < _RaytracingReflectionMinSmoothness || LOAD_TEXTURE2D_X(_DirectionPDFTexture, targetCoord).w < 0.0)
    if (depth == UNITY_RAW_FAR_CLIP_VALUE || perceptualSmoothness < _RaytracingReflectionMinSmoothness || LOAD_TEXTURE2D_X(_DirectionPDFTexture, targetCoord).w < 0.0)
    {
        _RaytracingReflectionTexture[COORD_TEXTURE2D_X(targetCoord)] = float4(0.0f, 0.0f, 0.0f, 0.0f);
        return;
    }

    // Fetch the lighting and compute the weight
    float4 lighting = LOAD_TEXTURE2D_X(_SsrLightingTextureRW, targetCoord);
    float weight = ComputeWeightValue(perceptualSmoothness);

    bool nonRaytracedProbesFallback = (_RayTracingFallbackHierarchy == RAYTRACINGFALLBACKHIERACHY_NON_RAYTRACED_REFLECTION_PROBES_AND_SKY);
    #ifdef DEMO_BUG_CB_FIXME
    // Use the following code in fullres mode, under certain scene config, you will get flashing between cyan and black.
    // ie the int _RayTracingFallbackHierarchy is sometimes corrupted with 0.
    if (nonRaytracedProbesFallback)
    {
        weight = 1;
        lighting.xyz = float3(0.0, 1.0, 1.0) * GetInverseCurrentExposureMultiplier() * _RayTracingFallbackHierarchy;
    }
    else
    {
        weight = 1;
        lighting.xyz = float3(1.0, 0.0, 0.0) * GetInverseCurrentExposureMultiplier() * _RayTracingFallbackHierarchy;
    }
    #else
    weight = nonRaytracedProbesFallback ? lighting.w * weight : weight;
    #endif

    // Output the result to the half resolution part of the texture
    _RaytracingReflectionTexture[COORD_TEXTURE2D_X(targetCoord)] = float4(lighting.xyz, weight);
}

[numthreads(RAYTRACING_REFLECTION_TILE_SIZE, RAYTRACING_REFLECTION_TILE_SIZE, 1)]
void ReflectionUpscale(uint3 dispatchThreadId : SV_DispatchThreadID, uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    // Compute the three coordinates we need to be reading from
    uint2 fullResolution = dispatchThreadId.xy;

    // Fetch the full resolution depth
    float hiResDepth = LOAD_TEXTURE2D_X(_DepthTexture, fullResolution).x;

    // Compute the main half resolution pixel
    uint2 halfResolution = fullResolution / 2;

    // And the representative coordinate
    uint2 representativeCoord = ComputeSourceCoordinates(halfResolution, _RaytracingFrameIndex);

    // If the full resolution depth is a background pixel, write the invalid data and we are done
    if (hiResDepth == UNITY_RAW_FAR_CLIP_VALUE)
    {
        _RaytracingReflectionTexture[COORD_TEXTURE2D_X(fullResolution)] = float4(0.0f, 0.0f, 0.0f, 0.0f);
        return;
    }

    // Compute the shift within the half res
    int2 halfResShift = fullResolution - representativeCoord;

    // Compute the shift of the pixel in the group
    int shiftIndex = halfResShift.y * 2 + halfResShift.x;

    // Compute the shift in the upscale table
    int offsetInCoordTable = shiftIndex * 4;

    float2 halfScreenSize = _ScreenSize.xy * 0.5;

    // Compute the half resolution coordinates we should tap from
    int2 halfResTap0 = clamp(0, halfResolution + UpscaleBilateralPixels[offsetInCoordTable], halfScreenSize - 1);
    int2 halfResTap1 = clamp(0, halfResolution + UpscaleBilateralPixels[offsetInCoordTable + 1], halfScreenSize - 1);
    int2 halfResTap2 = clamp(0, halfResolution + UpscaleBilateralPixels[offsetInCoordTable + 2], halfScreenSize - 1);
    int2 halfResTap3 = clamp(0, halfResolution + UpscaleBilateralPixels[offsetInCoordTable + 3], halfScreenSize - 1);

    // We are not using the depth pyramid to read the half res depths, so we need to multiply them by 2.
    float4 lowDepths = float4(LOAD_TEXTURE2D_X(_DepthTexture, ComputeSourceCoordinates(halfResTap0, _RaytracingFrameIndex)).x
                            , LOAD_TEXTURE2D_X(_DepthTexture, ComputeSourceCoordinates(halfResTap1, _RaytracingFrameIndex)).x
                            , LOAD_TEXTURE2D_X(_DepthTexture, ComputeSourceCoordinates(halfResTap2, _RaytracingFrameIndex)).x
                            , LOAD_TEXTURE2D_X(_DepthTexture, ComputeSourceCoordinates(halfResTap3, _RaytracingFrameIndex)).x);

    // Grab all the color values required for upscale
    float4 lowResCol0 = max(0, LOAD_TEXTURE2D_X(_SsrLightingTextureRW, halfResTap0));
    float4 lowResCol1 = max(0, LOAD_TEXTURE2D_X(_SsrLightingTextureRW, halfResTap1));
    float4 lowResCol2 = max(0, LOAD_TEXTURE2D_X(_SsrLightingTextureRW, halfResTap2));
    float4 lowResCol3 = max(0, LOAD_TEXTURE2D_X(_SsrLightingTextureRW, halfResTap3));

    // Bilateral upscale and output the result
    _RaytracingReflectionTexture[COORD_TEXTURE2D_X(fullResolution)] = BilUpColor(hiResDepth, lowDepths, lowResCol0, lowResCol1, lowResCol2, lowResCol3);
}
