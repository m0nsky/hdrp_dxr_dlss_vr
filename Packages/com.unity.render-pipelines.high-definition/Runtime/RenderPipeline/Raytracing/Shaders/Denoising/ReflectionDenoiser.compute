#pragma only_renderers d3d11

#pragma kernel TemporalAccumulationFullRes               TEMPORAL_ACCUMULATION=TemporalAccumulationFullRes               MISS_RATIO_IN_WEIGHT=false
#pragma kernel TemporalAccumulationHalfRes               TEMPORAL_ACCUMULATION=TemporalAccumulationHalfRes               MISS_RATIO_IN_WEIGHT=false   HALF_RESOLUTION
#pragma kernel TemporalAccumulationFullResMissWeighted   TEMPORAL_ACCUMULATION=TemporalAccumulationFullResMissWeighted   MISS_RATIO_IN_WEIGHT=true
#pragma kernel TemporalAccumulationHalfResMissWeighted   TEMPORAL_ACCUMULATION=TemporalAccumulationHalfResMissWeighted   MISS_RATIO_IN_WEIGHT=true    HALF_RESOLUTION

#pragma kernel CopyHistory                               COPY_HISTORY=CopyHistory                                        MISS_RATIO_IN_WEIGHT=false
#pragma kernel CopyHistoryMissWeighted                   COPY_HISTORY=CopyHistoryMissWeighted                            MISS_RATIO_IN_WEIGHT=true

#pragma kernel BilateralFilterH_FR                       BILATERAL_FILTER=BilateralFilterH_FR                            MISS_RATIO_IN_WEIGHT=false
#pragma kernel BilateralFilterH_HR                       BILATERAL_FILTER=BilateralFilterH_HR                            MISS_RATIO_IN_WEIGHT=false   HALF_RESOLUTION
#pragma kernel BilateralFilterHMissWeighted_FR           BILATERAL_FILTER=BilateralFilterHMissWeighted_FR                MISS_RATIO_IN_WEIGHT=true
#pragma kernel BilateralFilterHMissWeighted_HR           BILATERAL_FILTER=BilateralFilterHMissWeighted_HR                MISS_RATIO_IN_WEIGHT=true    HALF_RESOLUTION
#pragma kernel BilateralFilterV_FR                       BILATERAL_FILTER=BilateralFilterV_FR                            MISS_RATIO_IN_WEIGHT=false   FINAL_PASS
#pragma kernel BilateralFilterV_HR                       BILATERAL_FILTER=BilateralFilterV_HR                            MISS_RATIO_IN_WEIGHT=false   FINAL_PASS       HALF_RESOLUTION
#pragma kernel BilateralFilterVMissWeighted_FR           BILATERAL_FILTER=BilateralFilterVMissWeighted_FR                MISS_RATIO_IN_WEIGHT=true    FINAL_PASS
#pragma kernel BilateralFilterVMissWeighted_HR           BILATERAL_FILTER=BilateralFilterVMissWeighted_HR                MISS_RATIO_IN_WEIGHT=true    FINAL_PASS       HALF_RESOLUTION

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/NormalBuffer.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/ScreenSpaceLighting/ScreenSpaceLighting.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingReflectionCommon.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingSampling.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Builtin/BuiltinData.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/PostProcessing/Shaders/TemporalAntialiasing.hlsl"
#define BILATERAL_ROUGHNESS
TEXTURE2D_X(_SsrClearCoatMaskTexture);
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/Denoising/BilateralFilter.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/Denoising/DenoisingUtils.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.cs.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"

// Tile size of this compute
#define REFLECTION_FILTER_TILE_SIZE 8

#define DEBUG_SHOW_WEIGHTS_ONLY false
// #pragma enable_d3d11_debug_symbols

// Threshold at which we decide to reject the reflection history
#define REFLECTION_HISTORY_REJECTION_THRESHOLD 0.75
// Threshold at which we go from accumulation to clamping
#define ROUGHNESS_ACCUMULATION_THRESHOLD 0.5

// Input textures
TEXTURE2D_X(_DenoiseInputTexture);
TEXTURE2D_X(_HistoryBuffer);
//#if MISS_RATIO_IN_WEIGHT == true
TEXTURE2D_X(_HistorySampleCountTexture); // TODO!
//#endif
TEXTURE2D_X(_HistoryDepthTexture);
// Value that tells us if the current history should be discarded based on scene-level data
float _HistoryValidity;
// Current inverse resolution of the history buffer
float2 _HistoryBufferSize;
// Resolution at which the effect is rendered (Half the _Screensize if half res)
float4 _CurrentEffectResolution;
float _PixelSpreadAngleTangent;
int _AffectSmoothSurfaces;
int _SingleReflectionBounce;

// Output texture
RW_TEXTURE2D_X(float4, _DenoiseOutputTextureRW);
RW_TEXTURE2D_X(float, _SampleCountTextureRW); // also input in CopyHistory
#if MISS_RATIO_IN_WEIGHT == true
// TODO! these guards dont seem to work.
RW_TEXTURE2D_X(float, _HistorySampleCountTextureRW);
#endif

[numthreads(REFLECTION_FILTER_TILE_SIZE, REFLECTION_FILTER_TILE_SIZE, 1)]
void TEMPORAL_ACCUMULATION(uint3 dispatchThreadId : SV_DispatchThreadID, uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    // Fetch the current pixel coordinate
    uint2 mainCoord = groupId * REFLECTION_FILTER_TILE_SIZE + groupThreadId;

    // The source coordinate for the normal and depth depends if we are in half res or not
    #ifdef HALF_RESOLUTION
    uint2 geometryCoords = ComputeSourceCoordinates(mainCoord, _RaytracingFrameIndex);
    #else
    uint2 geometryCoords = mainCoord;
    #endif

    // Fetch the depth
    float depth = LOAD_TEXTURE2D_X(_DepthTexture, geometryCoords).x;

    // If the history is flagged as invalid or this is a a background pixel write the noisy value and leave right away
    if (_HistoryValidity == 0.0 || depth == UNITY_RAW_FAR_CLIP_VALUE)
    {
        _DenoiseOutputTextureRW[COORD_TEXTURE2D_X(mainCoord)] = LOAD_TEXTURE2D_X(_DenoiseInputTexture, mainCoord);
        _SampleCountTextureRW[COORD_TEXTURE2D_X(mainCoord)] = 0;
        return;
    }

    // Read and decode the normal data
    NormalData normalData;
    DecodeFromNormalBuffer(geometryCoords, normalData);
    float4 coatMask = LOAD_TEXTURE2D_X(_SsrClearCoatMaskTexture, geometryCoords);
    normalData.perceptualRoughness = HasClearCoatMask(coatMask) ? CLEAR_COAT_PERCEPTUAL_ROUGHNESS : normalData.perceptualRoughness;

    // Read the depth and velocity vectors
    float2 velocity;
    DecodeMotionVector(LOAD_TEXTURE2D_X(_CameraMotionVectorsTexture, geometryCoords), velocity);

    // Compute the current and history UV coordinates
    float2 currentUV = (mainCoord + 0.5f) * _ScreenSize.zw;
    float2 historyCoordinate = ((float2)(mainCoord + 0.5f) - velocity * _CurrentEffectResolution.xy);
    float2 historyUV = clamp(historyCoordinate, 0.0f, _CurrentEffectResolution.xy - 1.0f) * _HistoryBufferSize.xy;

    // Fetch the current and history values and apply exposure to color components.
    float4 colorRaw = MISS_RATIO_IN_WEIGHT ? Fetch4(_DenoiseInputTexture, currentUV, 0.0, _RTHandleScale.xy) : float4(Fetch(_DenoiseInputTexture, currentUV, 0.0, _RTHandleScale.xy), 0);
    float4 historyRaw = Fetch4(_HistoryBuffer, historyUV, 0.0, 1.0);

    float colorW = MISS_RATIO_IN_WEIGHT ? colorRaw.w : 0;
    float4 color = float4(colorRaw.xyz * GetCurrentExposureMultiplier(), colorW);

    float historyW = MISS_RATIO_IN_WEIGHT ? historyRaw.w : 0;
    float4 history = float4(historyRaw.xyz * GetCurrentExposureMultiplier(), historyW);

    // If this is close to a perfectly smooth surface, we may not want to use the history (depending on _AffectSmoothSurfaces)
    // In thise case, see RaytracingReflections.raytrace: make sure we don't sample otherwise we could have noisy artifacts.
    // Keep in sync with the sampling in the raygen program in RaytracingReflections.raytrace (along with _SingleReflectionBounce here vs _RaytracingMaxRecursion in the former)
    if (SkipReflectionDenoiserHistoryAccumulation((_AffectSmoothSurfaces == 1), (_SingleReflectionBounce == 1), normalData.perceptualRoughness))
    {
        colorRaw.w = MISS_RATIO_IN_WEIGHT ? colorRaw.w : LOAD_TEXTURE2D_X(_DenoiseInputTexture, mainCoord).w;
        _DenoiseOutputTextureRW[COORD_TEXTURE2D_X(mainCoord)] = float4(color.xyz * GetInverseCurrentExposureMultiplier(), colorRaw.w);
        _SampleCountTextureRW[COORD_TEXTURE2D_X(mainCoord)] = 1;
        if (DEBUG_SHOW_WEIGHTS_ONLY)
            _DenoiseOutputTextureRW[COORD_TEXTURE2D_X(mainCoord)] = float4((float3)(colorRaw.w * GetInverseCurrentExposureMultiplier()), colorRaw.w);
        return;
    }

    //TODO float sampleCount = historyRaw.w;
    // When the raytracing shader outputs a ray miss ratio in the w channel, we need to also preserve its history, so the
    // sampleCount has its own texture. Otherwise, the history buffer uses the w channel for history sampleCount.
    float sampleCount = historyRaw.w;
    //#if MISS_RATIO_IN_WEIGHT == true
    sampleCount = MISS_RATIO_IN_WEIGHT ? Fetch(_HistorySampleCountTexture, historyUV, 0.0, 1.0).x : sampleCount;
    //#endif
    float4 result;

    if (normalData.perceptualRoughness > ROUGHNESS_ACCUMULATION_THRESHOLD)
    {
        bool canBeReprojected = true;

        // If the pixel was outside of the screen during the previous frame, invalidate the history
        if (historyCoordinate.x >= _CurrentEffectResolution.x || historyCoordinate.x < 0
            || historyCoordinate.y >= _CurrentEffectResolution.y || historyCoordinate.y < 0)
            canBeReprojected = false;

    #ifdef HALF_RESOLUTION
        float2 historyDepthUV = ((float2)(mainCoord * 2.0 + 0.5f) - velocity * _CurrentEffectResolution.xy * 2.0f) * _HistoryBufferSize.xy;
    #else
        float2 historyDepthUV = historyUV;
    #endif

        // Fetch the depth of the history pixel. If the history position was a background point, invalidate the history
        float historyDepth = SAMPLE_TEXTURE2D_X_LOD(_HistoryDepthTexture, s_linear_clamp_sampler, historyDepthUV, 0).r;
        if (historyDepth == UNITY_RAW_FAR_CLIP_VALUE)
            canBeReprojected = false;

        // Compute the world space position
        PositionInputs posInput = GetPositionInput(geometryCoords, _ScreenSize.zw, depth, UNITY_MATRIX_I_VP, UNITY_MATRIX_V);

        // Compute the world space position (from previous frame)
        float3 historyPositionWS = ComputeWorldSpacePosition(posInput.positionNDC - velocity, historyDepth, UNITY_MATRIX_PREV_I_VP);

        // Compute the max world radius that we consider acceptable for history reprojection
        float maxRadius = ComputeMaxReprojectionWorldRadius(posInput.positionWS, normalData.normalWS, _PixelSpreadAngleTangent);

        // Is it too far from the current position?
        if (length(historyPositionWS - posInput.positionWS) > maxRadius)
            canBeReprojected = false;

        if (canBeReprojected && sampleCount != 0.0)
        {
            float accumulationFactor = sampleCount >= 8.0 ? 0.93 : (sampleCount / (sampleCount + 1.0));
            result = (color * (1.0 - accumulationFactor) + history * accumulationFactor);
            sampleCount = max(sampleCount + 1.0, 8.0);
        }
        else
        {
            result = color;
            sampleCount = 1.0;
        }
    }
    else
    {
        float4 topLeftRaw = MISS_RATIO_IN_WEIGHT ? Fetch4(_DenoiseInputTexture, currentUV, -RADIUS, _RTHandleScale.xy)
                                                   : float4(Fetch(_DenoiseInputTexture, currentUV, -RADIUS, _RTHandleScale.xy),0);
        float4 bottomRightRaw = MISS_RATIO_IN_WEIGHT ? Fetch4(_DenoiseInputTexture, currentUV, RADIUS, _RTHandleScale.xy)
                                                       : float4(Fetch(_DenoiseInputTexture, currentUV, RADIUS, _RTHandleScale.xy),0);

        float topLeftW = MISS_RATIO_IN_WEIGHT ? topLeftRaw.w : 0;
        float bottomRightW = MISS_RATIO_IN_WEIGHT ? bottomRightRaw.w : 0;
        float4 topLeft = float4(topLeftRaw.xyz * GetCurrentExposureMultiplier(), topLeftW);
        float4 bottomRight = float4(bottomRightRaw.xyz * GetCurrentExposureMultiplier(), bottomRightW);

        // We split up the weight accumulations
        // (feedback for weights will be different than for the color)
        // We only use the final result if needed (based on MISS_RATIO_IN_WEIGHT)
        // so the compiler will prune out the weight accumulation path.

        float4 corners = 4.0 * (topLeft + bottomRight) - 2.0 * color;

        color.xyz = clamp(color.xyz, 0.0, CLAMP_MAX);

        #if 1
        // TODO: Cleanup, remove usage of FastTonemapPerChannel, obviously weights dont
        // have the dynamic range of radiance, but this was a test to see if the nonlinear function
        // helped or made worse the transition from pre-integrated fallback to raytraced.
        #undef FastTonemapPerChannel
        #undef FastTonemapPerChannelInvert
        #define FastTonemapPerChannel(a) (a)
        #define FastTonemapPerChannelInvert(a) (a)
        #endif

        float4 average;
        average.xyz = FastTonemap((corners.xyz + color.xyz) / 7.0);
        average.w = FastTonemapPerChannel((corners.w + color.w) / 7.0);

        topLeft.xyz = FastTonemap(topLeft.xyz);
        topLeft.w = FastTonemapPerChannel(topLeft.w);

        bottomRight.xyz = FastTonemap(bottomRight.xyz);
        bottomRight.w = FastTonemapPerChannel(bottomRight.w);

        color.xyz = FastTonemap(color.xyz);
        color.w = FastTonemapPerChannel(color.w);

        float2 colorLuma = float2(Luminance(color), color.w);
        float2 averageLuma = float2(Luminance(average), average.w);
        float velocityLength = length(velocity);
        float2 nudge = lerp(4.0, 0.25, saturate(velocityLength * 100.0)) * abs(averageLuma - colorLuma);

        float4 minimum = min(bottomRight, topLeft) - nudge.xxxy;
        float4 maximum = max(topLeft, bottomRight) + nudge.xxxy;

        history.xyz = FastTonemap(history.xyz);
        history.w = FastTonemapPerChannel(history.w);

        // Clip history samples (compiler will optimize the 2nd)
        history.xyz = DirectClipToAABB(history.xyz, minimum.xyz, maximum.xyz);
        if (MISS_RATIO_IN_WEIGHT)
            history.w = DirectClipToAABB((float3)history.w, (float3)minimum.w, (float3)maximum.w).x;

        // Blend color & history
        // Feedback weight from unbiased luminance diff (Timothy Lottes)
        float2 historyLuma = float2(Luminance(history.xyz), history.w);
        float2 diff = abs(colorLuma - historyLuma) / float2(Max3(colorLuma.x, historyLuma.x, 0.2), Max3(colorLuma.y, historyLuma.y, 0.2));
        float2 weight = 1.0 - diff;
        const float feedbackMax = 0.96;
        const float feedbackMin = 0.91;
        float2 feedback = lerp(feedbackMax.xx, feedbackMin.xx, weight * weight);

        color.xyz = lerp(color.xyz, history.xyz, feedback.xxx);
        color.w = lerp(color.w, history.w, feedback.y);

        color.xyz = FastTonemapInvert(color.xyz);
        color.xyz = clamp(color.xyz, 0.0, CLAMP_MAX);
        color.w = FastTonemapPerChannelInvert(color.w);

        result = color;
    }

    float finalColorW = MISS_RATIO_IN_WEIGHT ? result.w : LOAD_TEXTURE2D_X(_DenoiseInputTexture, mainCoord).w;

    _DenoiseOutputTextureRW[COORD_TEXTURE2D_X(mainCoord)] = float4(result.xyz * GetInverseCurrentExposureMultiplier(), finalColorW);
    if (DEBUG_SHOW_WEIGHTS_ONLY)
        _DenoiseOutputTextureRW[COORD_TEXTURE2D_X(mainCoord)] = float4((float3)(result.w)*GetInverseCurrentExposureMultiplier(), result.w);
    _SampleCountTextureRW[COORD_TEXTURE2D_X(mainCoord)] = sampleCount;
}

[numthreads(REFLECTION_FILTER_TILE_SIZE, REFLECTION_FILTER_TILE_SIZE, 1)]
void COPY_HISTORY(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    if (any(dispatchThreadId.xy > uint2(_ScreenSize.xy)))
        return;  // Out of bounds, discard

    // Note in this kernel _DenoiseOutputTextureRW has the history buffer binded
    float4 currentColor = LOAD_TEXTURE2D_X(_DenoiseInputTexture, dispatchThreadId.xy);
    float sampleCount = _SampleCountTextureRW[COORD_TEXTURE2D_X(dispatchThreadId.xy)].x;

    float4 historyOutput = MISS_RATIO_IN_WEIGHT ? currentColor : float4(currentColor.xyz, sampleCount);

    _DenoiseOutputTextureRW[COORD_TEXTURE2D_X(dispatchThreadId.xy)] = historyOutput;
    #if MISS_RATIO_IN_WEIGHT == true
    // In that case, we need a separate texture tracking sampleCount
    _HistorySampleCountTextureRW[COORD_TEXTURE2D_X(dispatchThreadId.xy)] = sampleCount;
    #endif
}

int _DenoiserFilterRadius;
TEXTURE2D(_ReflectionFilterMapping);

#define BILATERAL_FILTER_SIGMA 0.9

// Separated bilateral filter (two passes, each with 2*Radius taps)
[numthreads(REFLECTION_FILTER_TILE_SIZE, REFLECTION_FILTER_TILE_SIZE, 1)]
void BILATERAL_FILTER(uint3 dispatchThreadId : SV_DispatchThreadID, uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    // Fetch the current pixel coordinate
    uint2 centerCoord = groupId * REFLECTION_FILTER_TILE_SIZE + groupThreadId;

    // Based on which pass of the filter we are doing, adjust the sampling direction
    #if FINAL_PASS
    const uint2 passIncr = uint2(1, 0);
    #else
    const uint2 passIncr = uint2(0, 1);
    #endif

    #if HALF_RESOLUTION
    uint2 geometrCoords = ComputeSourceCoordinates(centerCoord, _RaytracingFrameIndex);
    #else
    uint2 geometrCoords = centerCoord;
    #endif
    // Tap the central pixel coordinates
    const BilateralData center = TapBilateralData(geometrCoords);

    // Compute the effective radius we should be using for the filtering
    const float3 viewWS = GetWorldSpaceNormalizeViewDir(center.position);
    float2 mappingUV = float2(dot(viewWS, center.normal), center.roughness);
    float2 radiusScale = SAMPLE_TEXTURE2D_LOD(_ReflectionFilterMapping, s_linear_clamp_sampler, mappingUV, 0.0f).xy;
    #if FINAL_PASS
    const float radius = _DenoiserFilterRadius * radiusScale.x;
    #else
    const float radius = _DenoiserFilterRadius * radiusScale.y;
    #endif
    const float sigma =  radius * BILATERAL_FILTER_SIGMA;
    const int effectiveRadius = min(sigma * 2.0, radius);

    // Store the intermediate result
    float4 finalColor = MISS_RATIO_IN_WEIGHT ? LOAD_TEXTURE2D_X(_DenoiseInputTexture, centerCoord).xyzw
                                               : float4(LOAD_TEXTURE2D_X(_DenoiseInputTexture, centerCoord).xyz, 0);

    // If this pixels does not have ray traced reflections anyway, just skip it.
    if (_RaytracingReflectionMinSmoothness <= PerceptualRoughnessToPerceptualSmoothness(center.roughness))
    {
        // Initialize variables for accumulation
        float4 colorSum = float4(0.0, 0.0, 0.0, 0.0);
        float wSum = 0.0;

        int2 tapCoord = centerCoord - effectiveRadius * passIncr;
        for (int r = -effectiveRadius; r <= effectiveRadius; ++r, tapCoord += passIncr)
        {
            // Make sure the pixel coord we are trying to use is in the screen (not out of bounds)
            if (tapCoord.x >= _ScreenSize.x || tapCoord.x < 0 || tapCoord.y >= _ScreenSize.y || tapCoord.y < 0)
                continue;

            #if HALF_RESOLUTION
            uint2 tapGeometryCoords = ComputeSourceCoordinates(tapCoord, _RaytracingFrameIndex);
            #else
            uint2 tapGeometryCoords = tapCoord;
            #endif
            // Compute the weight (skip computation for the center)
            const BilateralData tapData = TapBilateralData(tapGeometryCoords);
            float w = r ? gaussian(r, sigma) * ComputeBilateralWeight(center, tapData) : 1.0;
            w = _RaytracingReflectionMinSmoothness > PerceptualRoughnessToPerceptualSmoothness(tapData.roughness) ? 0.0 : w;
            colorSum += LOAD_TEXTURE2D_X(_DenoiseInputTexture, tapCoord).xyzw * w;
            wSum += w;
        }
        // Normalize the result
        finalColor.xyz = colorSum.xyz / wSum;
        finalColor.w = MISS_RATIO_IN_WEIGHT ? (colorSum.w / wSum) : finalColor.w;
    }

    finalColor = MISS_RATIO_IN_WEIGHT ? finalColor : float4(finalColor.xyz, LOAD_TEXTURE2D_X(_DenoiseInputTexture, centerCoord).w);
    _DenoiseOutputTextureRW[COORD_TEXTURE2D_X(centerCoord)] = finalColor;
}
